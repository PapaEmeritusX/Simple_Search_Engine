type: edu
custom_name: stage6
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>().setAttach(
                    new TestClue("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")).setInput("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES),


                new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")).setInput("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        List<Integer> result = new ArrayList<>();

                        List<String> intendedResult = new ArrayList<>();

                        while (true) {
                            String mode = inputLines[currentInputLine].trim().toLowerCase();
                            currentInputLine++;

                            String toSearch = "";

                            if (mode.equalsIgnoreCase("all")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (!(s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck))) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("any")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = false;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = true;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("none")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            }
                        }

                        String[] userResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                userResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(String[]::new);

                        Arrays.sort(correctOutput);
                        Arrays.sort(userResult);

                        if (!Arrays.equals(correctOutput, userResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(String[]::new);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }
  learner_created: false
- name: src/search/logic/strategy/AllMatchingStrategy.java
  visible: true
  learner_created: true
- name: src/search/logic/strategy/AnyMatchingStrategy.java
  visible: true
  learner_created: true
- name: src/search/logic/strategy/NoneMatchingStrategy.java
  visible: true
  learner_created: true
- name: src/search/logic/strategy/MatchingStrategy.java
  visible: true
  learner_created: true
- name: src/search/logic/strategy/PeopleMatcher.java
  visible: true
  learner_created: true
- name: src/search/logic/SearchEngine.java
  visible: true
  text: "package search.logic;\n\nimport java.io.File;\nimport java.util.*;\n\npublic\
    \ final class SearchEngine {\n    private static Map<String, String> dataMap;\n\
    \    private static Map<String, ArrayList<String>> invertedIndexMap;\n\n    public\
    \ static void initDataMap(String fileName) {\n        dataMap = new HashMap<>();\n\
    \n        File file = new File(fileName);\n        int count = 0;\n        try\
    \ (Scanner fileScanner = new Scanner(file)) {\n            while (fileScanner.hasNextLine())\
    \ {\n                dataMap.put( count++ + \"\", fileScanner.nextLine());\n \
    \           }\n\n        } catch (Exception e) {\n            System.out.println(\"\
    Error: \" + e.getMessage());\n        }\n        initInvertedIndexMap(dataMap);\n\
    \    }\n    public static void initInvertedIndexMap(Map<String, String> map) {\n\
    \        invertedIndexMap = new HashMap<>();\n\n        for (var entry: map.entrySet())\
    \ {\n            String[] words = entry.getValue().split(\" \");\n           \
    \ for (String word: words) {\n                String lowWord = word.toLowerCase();\n\
    \                invertedIndexMap.putIfAbsent(lowWord, new ArrayList<>());\n \
    \               invertedIndexMap.get(lowWord).add(entry.getKey());\n         \
    \   }\n        }\n    }\n\n    public static void printDataset() {\n        for\
    \ (String line: dataMap.values()) {\n            System.out.println(line);\n \
    \       }\n    }\n\n    public static void searchInLine(String attribute) {\n\
    \        boolean matchFound = false;\n        \n\n        List<String> indices\
    \ = invertedIndexMap.get(attribute.toLowerCase());\n        if (indices != null)\
    \ {\n            System.out.println(indices.size()  + \" persons found:\");\n\
    \            for (String index: indices) {\n                matchFound = true;\n\
    \                System.out.println(dataMap.get(index));\n\n            }\n  \
    \      }\n        if (!matchFound) {\n            System.out.println(\"No matching\
    \ people found.\");\n        }\n    }\n}"
  learner_created: true
- name: src/search/AppUI.java
  visible: true
  text: |
    package search;

    import search.logic.*;
    import java.util.Scanner;


    public class AppUI {
        private final Scanner scanner;

        public AppUI(Scanner scanner, String fileName) {
            this.scanner = scanner;
            SearchEngine.initDataMap(fileName);
        }

        public void start() {
            appMenu();
        }

        private void appMenu() {
            while (true) {
                System.out.println("=== Menu ===");
                System.out.println("1. Find a person");
                System.out.println("2. Print all people");
                System.out.println("0. Exit");

                int input = Integer.parseInt(scanner.nextLine());
                System.out.println();

                switch (input) {
                    case 1:
                        System.out.println("Enter a name or email to search all suitable people.");
                        String attribute = scanner.nextLine();
                        SearchEngine.searchInLine(attribute);
                        System.out.println();
                        break;
                    case 2:
                        System.out.println("=== List of people ===");
                        SearchEngine.printDataset();
                        System.out.println();
                        break;
                    case 0:
                        System.out.println("Bye!");
                        System.out.println();
                        return;
                    default:
                        System.out.println("Incorrect option! Try again.");
                        System.out.println();
                        break;
                }
            }
        }

    }
  learner_created: true
- name: test/SearchEngineTests.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/66/stages/359/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 31 Jul 2021 17:35:20 UTC
record: 6
